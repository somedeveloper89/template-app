# Android CircleCI configuration file example

# We always start with the version.
version: 2
# Each job represents a phase in the Build-Test-Deploy process.
jobs:
  # This sample needs only a build job, so everything else is going to live under that key.
  build:
    # In each job, we have the option of specifying a working_directory. This is the directory into which
    # our code will be checked out, and this path will be used as the default working directory for the
    # rest of the job unless otherwise specified.
    working_directory: ~/code
    # Beneath working_directory, we can specify container images under a docker key.
    docker:
      # We use the CircleCI provided Android image with the api-29-alpha tag.
      - image: circleci/android:api-29-alpha
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
    environment:
      JVM_OPTS: -Xmx3200m
    # We'll add several steps within the build job.
    steps:
      # We start with checkout so we can operate on the codebase.
      - checkout
      # We pull down the cache, if present. If this is your first run, or if you've changed either
      # of your build.gradle files, this won't do anything.
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      # We run ./gradlew androidDependencies next to pull down the project's dependencies. Normally
      # you never call this task directly since it's done automatically when it's needed, but calling
      # this task directly allows us to insert a save_cache step that will store the dependencies in
      # order to speed things up for next time.
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      # Then ./gradlew lint test runs the unit tests, and runs the built in linting tools to check
      # your code for style issues.
      - run:
          name: Run Tests
          command: ./gradlew lint test
      # We then upload the build reports as job artifacts.
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      # We upload the test metadata (XML) for CircleCI to process.
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results